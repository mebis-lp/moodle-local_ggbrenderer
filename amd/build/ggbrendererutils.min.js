define("local_ggbrenderer/ggbrendererutils",["exports","local_ggbrenderer/ggbtargetrenderer"],(function(_exports,ggbTargetRenderer){function _getRequireWildcardCache(nodeInterop){if("function"!=typeof WeakMap)return null;var cacheBabelInterop=new WeakMap,cacheNodeInterop=new WeakMap;return(_getRequireWildcardCache=function(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop})(nodeInterop)}Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.storeApplet=_exports.renderGgbAppletToTarget=_exports.getParentsMinWidth=_exports.getApplets=_exports.getAppletApi=_exports.getApplet=void 0,ggbTargetRenderer=function(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule)return obj;if(null===obj||"object"!=typeof obj&&"function"!=typeof obj)return{default:obj};var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj))return cache.get(obj);var newObj={},hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj)if("default"!==key&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;desc&&(desc.get||desc.set)?Object.defineProperty(newObj,key,desc):newObj[key]=obj[key]}newObj.default=obj,cache&&cache.set(obj,newObj);return newObj}
/**
   * Utils collection for local_ggbrenderer.
   *
   * This module manipulates the DOM to style beta features.
   *
   * @module     local_ggbrenderer/ggbrendererutils
   * @copyright  2022 ISB Bayern
   * @author     Philipp Memmel
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */(ggbTargetRenderer);_exports.renderGgbAppletToTarget=(targetSelector,appletId,ggbParams)=>{"object"==typeof ggbParams&&(ggbParams=JSON.stringify(ggbParams));ggbTargetRenderer.init(targetSelector,appletId,"https://www.geogebra.org/apps/deployggb.js",ggbParams)};_exports.storeApplet=(appletId,ggbApplet)=>{window.ggbApplets||(window.ggbApplets=[]),window.ggbApplets[appletId]=ggbApplet};const getApplet=appletId=>window.ggbApplets[appletId];_exports.getApplet=getApplet;_exports.getAppletApi=appletId=>{const applet=getApplet(appletId);return applet?applet.getAppletObject():null};_exports.getApplets=()=>window.ggbApplets;_exports.getParentsMinWidth=container=>{let min=Number.MAX_VALUE,parent=container.parentElement;for(;"BODY"!==parent.tagName;)parent.clientWidth<min&&(min=parent.clientWidth),parent=parent.parentElement;return min}}));

//# sourceMappingURL=ggbrendererutils.min.js.map