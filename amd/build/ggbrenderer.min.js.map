{"version":3,"file":"ggbrenderer.min.js","sources":["../src/ggbrenderer.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Main module for local_ggbrenderer.\n *\n * This module injects a GeoGebra applet into the DOM.\n *\n * @module     local_ggbrenderer/ggbrenderer\n * @copyright  2022 ISB Bayern\n * @author     Philipp Memmel\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport * as ggbRendererUtils from 'local_ggbrenderer/ggbrendererutils';\nimport Pending from 'core/pending';\nimport Log from 'core/log';\n\nlet resizeTimeout;\n\n/**\n * Init function for local_ggbrenderer/ggbrenderer module.\n *\n * @param {function} DeployObject the object from deployggb.js used to load the applet from\n * @param {string} appletId a string which should be used to identify the rendered GGB applet to access its JS API afterwards\n */\nexport const init = (DeployObject, appletId) => {\n    const pendingPromise = new Pending('local_ggbrenderer/init');\n    const containerId = 'local_ggbrenderer_container_' + appletId;\n    const scalingContainer = document.querySelector('.local_ggbrenderer_scalecontainer_' + appletId);\n    const params = JSON.parse(document.getElementById(containerId).dataset.ggbparams);\n\n    if (params.hasOwnProperty('width') && params.hasOwnProperty('heigth')) {\n        scalingContainer.style.overflowX = 'auto';\n        scalingContainer.style.overflowY = 'auto';\n    }\n\n    const ggbApplet = new DeployObject(params, true);\n\n    ggbRendererUtils.storeApplet(appletId, ggbApplet);\n    // The scaling container starts with a width of 100%. After that we have to set the width to a fixed pixel value for the\n    // scaling container feature of the GGB applet to work properly.\n    scalingContainer.style.width = scalingContainer.getBoundingClientRect().width + 'px';\n\n    window.ggbAppletOnLoad = () => {\n        // Unregister old event listeners in case we have multiple GeoGebra questions on one page.\n        // We only need one for the whole page.\n        window.removeEventListener('resize', resizeScalingContainer);\n        window.addEventListener('resize', resizeScalingContainer);\n    };\n    window.addEventListener('load', () => ggbApplet.inject(containerId));\n\n    pendingPromise.resolve();\n};\n\n/**\n * Resizes the scaling container to the maximum amount of available space. The GGB applet will scale into it.\n *\n * This method should be called if the browser window has been resized.\n */\nconst resizeScalingContainer = () => {\n    clearTimeout(resizeTimeout);\n    resizeTimeout = setTimeout(() => {\n        document.querySelectorAll('.local_ggbrenderer_scalecontainer').forEach(scalingContainer => {\n            // We determine the minimum width of all parent containers of the scaling container and use this as width for\n            // the scaling container. This should be a good idea for both very small and very wide applets.\n            scalingContainer.style.width = ggbRendererUtils.getParentsMinWidth(scalingContainer) + 'px';\n        });\n        return true;\n    }, 250);\n};\n"],"names":["resizeTimeout","DeployObject","appletId","pendingPromise","Pending","containerId","scalingContainer","document","querySelector","params","JSON","parse","getElementById","dataset","ggbparams","hasOwnProperty","style","overflowX","overflowY","ggbApplet","ggbRendererUtils","storeApplet","width","getBoundingClientRect","window","ggbAppletOnLoad","removeEventListener","resizeScalingContainer","addEventListener","inject","resolve","clearTimeout","setTimeout","querySelectorAll","forEach","getParentsMinWidth"],"mappings":";;;;;;;;;;;IA8BIA,q2BAQgB,CAACC,aAAcC,kBACzBC,eAAiB,IAAIC,iBAAQ,0BAC7BC,YAAc,+BAAiCH,SAC/CI,iBAAmBC,SAASC,cAAc,qCAAuCN,UACjFO,OAASC,KAAKC,MAAMJ,SAASK,eAAeP,aAAaQ,QAAQC,WAEnEL,OAAOM,eAAe,UAAYN,OAAOM,eAAe,YACxDT,iBAAiBU,MAAMC,UAAY,OACnCX,iBAAiBU,MAAME,UAAY,cAGjCC,UAAY,IAAIlB,aAAaQ,QAAQ,GAE3CW,iBAAiBC,YAAYnB,SAAUiB,WAGvCb,iBAAiBU,MAAMM,MAAQhB,iBAAiBiB,wBAAwBD,MAAQ,KAEhFE,OAAOC,gBAAkB,KAGrBD,OAAOE,oBAAoB,SAAUC,wBACrCH,OAAOI,iBAAiB,SAAUD,yBAEtCH,OAAOI,iBAAiB,QAAQ,IAAMT,UAAUU,OAAOxB,eAEvDF,eAAe2B,iBAQbH,uBAAyB,KAC3BI,aAAa/B,eACbA,cAAgBgC,YAAW,KACvBzB,SAAS0B,iBAAiB,qCAAqCC,SAAQ5B,mBAGnEA,iBAAiBU,MAAMM,MAAQF,iBAAiBe,mBAAmB7B,kBAAoB,SAEpF,IACR"}