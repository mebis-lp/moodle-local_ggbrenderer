{"version":3,"file":"ggbrenderer.min.js","sources":["../src/ggbrenderer.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Main module for local_ggbrenderer.\n *\n * This module injects a GeoGebra applet into the DOM.\n *\n * @module     local_ggbrenderer/ggbrenderer\n * @copyright  2022 ISB Bayern\n * @author     Philipp Memmel\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport * as ggbRendererUtils from 'local_ggbrenderer/ggbrendererutils';\nimport Pending from 'core/pending';\nimport Log from 'core/log';\n\nlet resizeTimeout;\n\n/**\n * Init function for local_ggbrenderer/ggbrenderer module.\n *\n * @param {function} DeployObject the object from deployggb.js used to load the applet from\n * @param {string} appletId a string which should be used to identify the rendered GGB applet to access its JS API afterwards\n */\nexport const init = (DeployObject, appletId) => {\n    const pendingPromise = new Pending('local_ggbrenderer/init');\n    const containerId = 'local_ggbrenderer_container_' + appletId;\n    const params = JSON.parse(document.getElementById(containerId).dataset.ggbparams);\n\n    const ggbApplet = new DeployObject(params, true);\n\n    ggbRendererUtils.storeApplet(appletId, ggbApplet);\n\n    window.ggbAppletOnLoad = () => {\n        // Set the initial size of the scaling containers so GeoGebra applets scale a first time correctly after loading.\n        resizeScalingContainer();\n        // Unregister old event listeners in case we have multiple GeoGebra questions on one page.\n        // We only need one for the whole page.\n        window.removeEventListener('resize', resizeScalingContainer);\n        window.addEventListener('resize', resizeScalingContainer);\n    };\n    window.addEventListener('load', () => ggbApplet.inject(containerId));\n\n    pendingPromise.resolve();\n};\n\n/**\n * Resizes the scaling container to the maximum amount of available space. The GGB applet will scale into it.\n *\n * This method should be called if the browser window has been resized.\n */\nconst resizeScalingContainer = () => {\n    clearTimeout(resizeTimeout);\n    resizeTimeout = setTimeout(() => {\n        document.querySelectorAll('.local_ggbrenderer_scalecontainer').forEach(scalingContainer => {\n            // We set the scaling container's width to a huge amount to make the parent divs take the maximum width.\n            scalingContainer.style.width = '10000px';\n            // After that we determine the minimum width of all parent containers of the scaling container.\n            scalingContainer.style.width = parentMinWidth(scalingContainer) + 'px';\n        });\n        return true;\n    }, 250);\n};\n\n/**\n * Utility function to determine the minimum width of all parent elements of the given container.\n *\n * @param {HTMLElement} container The container of which we want to determine the minimum width of all parent elements\n * @return {number} minimum width of all parent containers of specified container element in px\n */\nconst parentMinWidth = (container) => {\n    let min = Number.MAX_VALUE;\n    let parent = container.parentElement;\n    while (parent.tagName !== 'BODY') {\n        if (parent.clientWidth < min) {\n            min = parent.clientWidth;\n        }\n        parent = parent.parentElement;\n    }\n    return min;\n};\n"],"names":["resizeTimeout","DeployObject","appletId","pendingPromise","Pending","containerId","ggbApplet","JSON","parse","document","getElementById","dataset","ggbparams","ggbRendererUtils","storeApplet","window","ggbAppletOnLoad","resizeScalingContainer","removeEventListener","addEventListener","inject","resolve","clearTimeout","setTimeout","querySelectorAll","forEach","scalingContainer","style","width","parentMinWidth","container","min","Number","MAX_VALUE","parent","parentElement","tagName","clientWidth"],"mappings":";;;;;;;;;;;IA8BIA,q2BAQgB,CAACC,aAAcC,kBACzBC,eAAiB,IAAIC,iBAAQ,0BAC7BC,YAAc,+BAAiCH,SAG/CI,UAAY,IAAIL,aAFPM,KAAKC,MAAMC,SAASC,eAAeL,aAAaM,QAAQC,YAE5B,GAE3CC,iBAAiBC,YAAYZ,SAAUI,WAEvCS,OAAOC,gBAAkB,KAErBC,yBAGAF,OAAOG,oBAAoB,SAAUD,wBACrCF,OAAOI,iBAAiB,SAAUF,yBAEtCF,OAAOI,iBAAiB,QAAQ,IAAMb,UAAUc,OAAOf,eAEvDF,eAAekB,iBAQbJ,uBAAyB,KAC3BK,aAAatB,eACbA,cAAgBuB,YAAW,KACvBd,SAASe,iBAAiB,qCAAqCC,SAAQC,mBAEnEA,iBAAiBC,MAAMC,MAAQ,UAE/BF,iBAAiBC,MAAMC,MAAQC,eAAeH,kBAAoB,SAE/D,IACR,MASDG,eAAkBC,gBAChBC,IAAMC,OAAOC,UACbC,OAASJ,UAAUK,mBACG,SAAnBD,OAAOE,SACNF,OAAOG,YAAcN,MACrBA,IAAMG,OAAOG,aAEjBH,OAASA,OAAOC,qBAEbJ"}