define("local_ggbrenderer/ggbtargetrenderer",["exports","local_ggbrenderer/ggbrendererutils","core/templates","core/notification","core/pending","core/log"],(function(_exports,ggbRendererUtils,_templates,_notification,_pending,_log){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _getRequireWildcardCache(nodeInterop){if("function"!=typeof WeakMap)return null;var cacheBabelInterop=new WeakMap,cacheNodeInterop=new WeakMap;return(_getRequireWildcardCache=function(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop})(nodeInterop)}Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.init=void 0,ggbRendererUtils=function(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule)return obj;if(null===obj||"object"!=typeof obj&&"function"!=typeof obj)return{default:obj};var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj))return cache.get(obj);var newObj={},hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj)if("default"!==key&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;desc&&(desc.get||desc.set)?Object.defineProperty(newObj,key,desc):newObj[key]=obj[key]}newObj.default=obj,cache&&cache.set(obj,newObj);return newObj}
/**
   * Module of local_ggbrenderer for rendering a GGB applet into a target DOM element.
   *
   * @module     local_ggbrenderer/ggbtargetrenderer
   * @copyright  2022 ISB Bayern
   * @author     Philipp Memmel
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */(ggbRendererUtils),_templates=_interopRequireDefault(_templates),_pending=_interopRequireDefault(_pending),_log=_interopRequireDefault(_log);_exports.init=(targetSelector,appletId,deployGgbUrl,ggbParams)=>{const pendingPromise=new _pending.default("local_ggbrenderer/init");targetSelector||_log.default.error("No target selector specified. GGB applet will not be rendered.");const renderContext={appletid:appletId,deployggburl:deployGgbUrl,ggbparams:ggbParams};_templates.default.renderForPromise("local_ggbrenderer/ggbcontainer",renderContext).then((_ref=>{let{html:html,js:js}=_ref;return _templates.default.appendNodeContents(targetSelector,html,js),pendingPromise.resolve(),!0})).catch((error=>(0,_notification.exception)(error)))}}));

//# sourceMappingURL=ggbtargetrenderer.min.js.map