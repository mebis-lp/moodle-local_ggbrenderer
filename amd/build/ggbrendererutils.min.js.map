{"version":3,"file":"ggbrendererutils.min.js","sources":["../src/ggbrendererutils.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Utils collection for local_ggbrenderer.\n *\n * This module manipulates the DOM to style beta features.\n *\n * @module     local_ggbrenderer/ggbrendererutils\n * @copyright  2022 ISB Bayern\n * @author     Philipp Memmel\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Templates from 'core/templates';\nimport {exception as displayException} from 'core/notification';\n\nexport const storeApplet = (appletId, ggbApplet) => {\n    if (!window.ggbApplets) {\n        window.ggbApplets = [];\n    }\n    window.ggbApplets[appletId] = ggbApplet;\n};\n\n/**\n * Getter for accessing the GGB applet.\n *\n * @param {string} appletId unique id of the applet\n * @return {object} The GGBApplet for accessing applet internal functions\n */\nexport const getApplet = (appletId) => {\n    return window.ggbApplets[appletId];\n};\n\n/**\n * Getter for accessing the GGB applet's API.\n *\n * @param {string} appletId unique id of the applet\n * @return {object|null} The GGB API object of the applet with the specified appletId\n */\nexport const getAppletApi = (appletId) => {\n    const applet = getApplet(appletId);\n    if (!applet) {\n        return null;\n    }\n    return applet.getAppletObject();\n};\n\n/**\n * Getter for the object containing all GGB applets of a page.\n *\n * @return {[]}\n */\nexport const getApplets = () => {\n    return window.ggbApplets;\n};\n\n/**\n * Utility function to determine the minimum width of all parent elements of the given container.\n *\n * @param {HTMLElement} container The container of which we want to determine the minimum width of all parent elements\n * @return {number} minimum width of all parent containers of specified container element in px\n */\nexport const getParentsMinWidth = (container) => {\n    let min = Number.MAX_VALUE;\n    let parent = container.parentElement;\n    while (parent.tagName !== 'BODY') {\n        if (parent.clientWidth < min) {\n            min = parent.clientWidth;\n        }\n        parent = parent.parentElement;\n    }\n    return min;\n};\n"],"names":["appletId","ggbApplet","window","ggbApplets","getApplet","applet","getAppletObject","container","min","Number","MAX_VALUE","parent","parentElement","tagName","clientWidth"],"mappings":";;;;;;;;;;qQA6B2B,CAACA,SAAUC,aAC7BC,OAAOC,aACRD,OAAOC,WAAa,IAExBD,OAAOC,WAAWH,UAAYC,iBASrBG,UAAaJ,UACfE,OAAOC,WAAWH,6DASAA,iBACnBK,OAASD,UAAUJ,iBACpBK,OAGEA,OAAOC,kBAFH,0BAUW,IACfJ,OAAOC,uCASiBI,gBAC3BC,IAAMC,OAAOC,UACbC,OAASJ,UAAUK,mBACG,SAAnBD,OAAOE,SACNF,OAAOG,YAAcN,MACrBA,IAAMG,OAAOG,aAEjBH,OAASA,OAAOC,qBAEbJ"}