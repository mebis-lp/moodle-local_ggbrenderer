{"version":3,"file":"ggbtargetrenderer.min.js","sources":["../src/ggbtargetrenderer.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Module of local_ggbrenderer for rendering a GGB applet into a target DOM element.\n *\n * @module     local_ggbrenderer/ggbtargetrenderer\n * @copyright  2022 ISB Bayern\n * @author     Philipp Memmel\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport * as ggbRendererUtils from 'local_ggbrenderer/ggbrendererutils';\nimport Templates from 'core/templates';\nimport {exception as displayException} from 'core/notification';\nimport Pending from 'core/pending';\nimport Log from 'core/log';\n\n/**\n * Init function of local_ggbrenderer/ggbtargetrenderer.\n *\n * This function renders a GGB applet with given parameters in the HTML element with the given selector.\n *\n * @param {string} targetSelector selector of the target HTML element to render the GGB applet to\n * @param {string} appletId a string which should be used to identify the rendered GGB applet to access its JS API afterwards\n * @param {string} deployGgbUrl the URL with the deployggb.js file to load the applet from\n * @param {string} ggbParams json encoded string of params which should be passed to the applet\n */\nexport const init = (targetSelector, appletId, deployGgbUrl, ggbParams) => {\n    const pendingPromise = new Pending('local_ggbrenderer/init');\n\n    if (!targetSelector) {\n        Log.error('No target selector specified. GGB applet will not be rendered.');\n    }\n\n    const renderContext = {\n        'appletId': appletId,\n        'deployggburl': deployGgbUrl,\n        'ggbparams': ggbParams\n    };\n    Templates.renderForPromise('local_ggbrenderer/ggbcontainer', renderContext)\n        .then(({html, js}) => {\n            Templates.appendNodeContents(targetSelector, html, js);\n            pendingPromise.resolve();\n            return true;\n        })\n        .catch((error) => displayException(error));\n};\n"],"names":["targetSelector","appletId","deployGgbUrl","ggbParams","pendingPromise","Pending","error","renderContext","renderForPromise","then","_ref","html","js","appendNodeContents","resolve","catch"],"mappings":";;;;;;;;gKAwCoB,CAACA,eAAgBC,SAAUC,aAAcC,mBACnDC,eAAiB,IAAIC,iBAAQ,0BAE9BL,6BACGM,MAAM,wEAGRC,cAAgB,UACNN,sBACIC,uBACHC,8BAEPK,iBAAiB,iCAAkCD,eACxDE,MAAKC,WAACC,KAACA,KAADC,GAAOA,mCACAC,mBAAmBb,eAAgBW,KAAMC,IACnDR,eAAeU,WACR,KAEVC,OAAOT,QAAU,2BAAiBA"}